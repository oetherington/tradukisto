#!/usr/bin/env node

import { readFile, writeFile } from "node:fs/promises";
import { glob } from "glob";
import { DatabaseDetails, fetchDatabaseDetails } from "./DatabaseDetails";
import { parseSql } from "./Parser";
import { PgPostgresClient } from "./PgPostgresClient";
import { createDeclaration, type Declaration } from "./Declaration";
import { TsGenerator } from "./TsGenerator";
import type { Generator } from "./Generator";

const fileHeader = "/* Generated by tradukisto - do not edit manually */\n\n";

const processFile = async (
	databaseDetails: DatabaseDetails,
	generator: Generator,
	fileName: string,
) => {
	if (!fileName.endsWith(".sql")) {
		throw new Error(`Expected ${fileName} to have .sql extension`);
	}

	const fileContents = await readFile(fileName, "utf8");
	const queries = parseSql(fileContents);
	const decls = queries
		.map((query) => createDeclaration(databaseDetails, query.ast))
		.filter(Boolean) as Declaration[];
	for (let i = 0; i < queries.length; i++) {
		const query = queries[i];
		const decl = decls[i];
		const returnType = decl.resolveResultType();
		generator.addType(query.typeName, returnType);
	}
	const contents = generator.toString();

	const outputFileName = fileName.replace(/sql$/, "queries.ts");
	await writeFile(outputFileName, fileHeader + contents);

	return outputFileName;
};

const cliMain = async () => {
	const databaseUrl = process.env.DATABASE_URL;
	if (!databaseUrl) {
		throw new Error("No database url provided");
	}

	const targetGlob = process.argv[2];
	if (!targetGlob) {
		throw new Error("No target provided");
	}

	const fileNames = await glob(targetGlob);
	if (!fileNames.length) {
		throw new Error(`No files found matching glob "${targetGlob}"`);
	}

	const client = new PgPostgresClient(databaseUrl);
	const databaseDetails = await fetchDatabaseDetails(client);

	const promises: Promise<string>[] = [];
	for (const fileName of fileNames) {
		const generator = new TsGenerator();
		promises.push(processFile(databaseDetails, generator, fileName));
		console.log("filename", fileName);
	}
	const results = await Promise.all(promises);
	console.log("Wrote files:", results);
};

cliMain();
